openapi: 3.0.3
info:
  title: Conf-Portal Backend API
  version: 1.1.0
  description: |
    Two-stage self-registration, JWT auth, 10-day editable window,
    admin verification & assignment, secure PNG/JPEG uploads (≤ 2 MB),
    JWT-guarded image download, and PDF bundle download.

servers:
  - url: http://localhost:4000
    description: Local dev

tags:
  - name: Auth
  - name: User
  - name: Admin
  - name: Uploads

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # ───────────────────── Schemas ─────────────────────
  schemas:
    Error:
      type: object
      properties:
        message: { type: string }
        details:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              msg:   { type: string }
          nullable: true

    AccessToken:
      type: object
      properties:
        access:
          type: string
          description: JWT access token

    RegisterStage1Request:
      type: object
      required: [username, email, password]
      properties:
        username: { type: string, example: ram }
        email:    { type: string, format: email, example: ram@mail.com }
        password: { type: string, format: password, minLength: 8 }

    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string, example: ram }
        password: { type: string, format: password }

    Profile:
      type: object
      properties:
        fullName:       { type: string, example: Ram Kumar }
        state:          { type: string, example: Telangana }
        designation:    { type: string, example: Engineer }
        idType:         { type: string, example: Aadhaar }
        phone:          { type: string, example: "+91-9999999999" }
        emailId:        { type: string, format: email }
        frontImageKey:  { type: string }
        backImageKey:   { type: string }

    Preference:
      type: object
      properties:
        wantsBalaji:       { type: boolean }
        wantsSrikalahasti: { type: boolean }
        spouseWillAttend:  { type: boolean }

    Spouse:
      type: object
      nullable: true
      properties:
        fullName:       { type: string }
        idType:         { type: string }
        phone:          { type: string }
        emailId:        { type: string }
        frontImageKey:  { type: string }
        backImageKey:   { type: string }

    Travel:
      type: object
      properties:
        modeArrival:   { type: string, example: Flight }
        flightNo:      { type: string, example: AI502 }
        arrivalAt:     { type: string, format: date-time }
        modeDeparture: { type: string, example: Car }
        vehicleNo:     { type: string, example: TS09CQ1234 }
        departureAt:   { type: string, format: date-time }

    RegisterStage2Request:
      type: object
      required: [profile, preference, travel]
      properties:
        profile:    { $ref: '#/components/schemas/Profile' }
        preference: { $ref: '#/components/schemas/Preference' }
        spouse:     { $ref: '#/components/schemas/Spouse' }
        travel:     { $ref: '#/components/schemas/Travel' }

    AssignmentRequest:
      type: object
      required: [roomNo, driverName, driverPhone]
      properties:
        roomNo:      { type: string, example: A-102 }
        driverName:  { type: string, example: Ravi }
        driverPhone: { type: string, example: "+91-8888888888" }

  # ───────────────────── Common responses ─────────────────────
  responses:
    ValidationError:
      description: Input validation failed
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

    UnsupportedMedia:
      description: Only PNG/JPEG ≤ 2 MB accepted
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

    PayloadTooLarge:
      description: File exceeds 2 MB limit
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

    Unauthorized:
      description: Authentication required / invalid token
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

    Forbidden:
      description: Action not allowed for this user
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

paths:
  # ───────── Auth ─────────
  /api/auth/register-1:
    post:
      tags: [Auth]
      summary: Stage-1 registration (create account)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterStage1Request' }
      responses:
        '200':
          description: Access token + refresh cookie
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccessToken' }
        '422': { $ref: '#/components/responses/ValidationError' }

  /api/auth/register-2:
    post:
      tags: [Auth]
      summary: Stage-2 registration (full details)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterStage2Request' }
      responses:
        '200': { description: Completed }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '422': { $ref: '#/components/responses/ValidationError' }

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: Access token + refresh cookie
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccessToken' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '422': { $ref: '#/components/responses/ValidationError' }

  /api/auth/refresh:
    post:
      tags: [Auth]
      summary: Rotate tokens
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccessToken' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /api/auth/logout:
    post:
      tags: [Auth]
      summary: Logout
      responses:
        '204': { description: Logged out }

  # ───────── User ─────────
  /api/users/me:
    get:
      tags: [User]
      summary: Current user composite record
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: Composite object }
        '401': { $ref: '#/components/responses/Unauthorized' }
    put:
      tags: [User]
      summary: Update self (within editable window)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Any subset of profile / preference / spouse / travel
      responses:
        '200': { description: Updated }
        '403': { $ref: '#/components/responses/Forbidden' }
        '422': { $ref: '#/components/responses/ValidationError' }

  /api/users/me/download:
    get:
      tags: [User]
      summary: Download registration PDF
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: PDF attachment
          content:
            application/pdf: {}
        '401': { $ref: '#/components/responses/Unauthorized' }

  # ───────── Uploads ─────────
  /api/uploads/front:
    post:
      tags: [Uploads]
      summary: Upload front-side ID image
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Stored key
          content:
            application/json:
              schema:
                type: object
                properties:
                  key: { type: string }
        '413': { $ref: '#/components/responses/PayloadTooLarge' }
        '415': { $ref: '#/components/responses/UnsupportedMedia' }
        '422': { $ref: '#/components/responses/ValidationError' }

  /api/uploads/back:
    post:
      tags: [Uploads]
      summary: Upload back-side ID image
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Stored key
          content:
            application/json:
              schema:
                type: object
                properties:
                  key: { type: string }
        '413': { $ref: '#/components/responses/PayloadTooLarge' }
        '415': { $ref: '#/components/responses/UnsupportedMedia' }
        '422': { $ref: '#/components/responses/ValidationError' }

  /api/uploads/{key}:
    get:
      tags: [Uploads]
      summary: Download previously-uploaded image
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: key
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Image binary
          content:
            image/jpeg: {}
            image/png:  {}
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  # ───────── Admin ─────────
  /api/admin/users:
    get:
      tags: [Admin]
      summary: List users
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        '200': { description: Array of users }
        '403': { $ref: '#/components/responses/Forbidden' }

  /api/admin/users/{id}:
    get:
      tags: [Admin]
      summary: Get user
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: User + profile }
        '404': { $ref: '#/components/responses/NotFound' }

  /api/admin/users/{id}/verify:
    put:
      tags: [Admin]
      summary: Verify user
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Verified }
        '404': { $ref: '#/components/responses/NotFound' }

  /api/admin/users/{id}/assign:
    put:
      tags: [Admin]
      summary: Assign room & driver
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AssignmentRequest' }
      responses:
        '200': { description: Assigned }
        '404': { $ref: '#/components/responses/NotFound' }
        '422': { $ref: '#/components/responses/ValidationError' }